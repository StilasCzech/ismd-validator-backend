name: Release Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.3.0 for minor release, 2.0.0 for major; leave empty for auto-patch-increment)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.current-version.outputs.version }}
      main_version: ${{ steps.main-version.outputs.version }}
      new_version: ${{ steps.new-version.outputs.version }}
    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Fetch main branch
        run: git fetch origin main:main

      - name: Get current version in dev
        id: current-version
        run: |
          # Get version from root POM
          VERSION=$(./mvnw help:evaluate -DforceStdout -q -Dexpression=project.version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Get version in main
        id: main-version
        run: |
          # Get main branch version by directly parsing the output of git show
          ARTIFACT_ID=$(./mvnw help:evaluate -DforceStdout -q -Dexpression=project.artifactId)
          MAIN_VERSION=$(git show main:pom.xml | grep -A 10 "<artifactId>$ARTIFACT_ID</artifactId>" | grep '<version>' | head -1 | sed -E 's/.*<version>([^<]+)<.*/\1/')
          echo "version=$MAIN_VERSION" >> $GITHUB_OUTPUT
          echo "Main branch version: $MAIN_VERSION"

      - name: Determine new version
        id: new-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          MAIN_VERSION="${{ steps.main-version.outputs.version }}"
          
          # Check if user provided a version
          if [ -n "${{ github.event.inputs.version }}" ]; then
            # User-provided version takes precedence
            NEW_VERSION="${{ github.event.inputs.version }}"
            echo "User provided version: $NEW_VERSION"
          else
            # Check if version in dev already differs from main (without -SNAPSHOT)
            DEV_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-SNAPSHOT//')
            if [ "$DEV_VERSION" != "$MAIN_VERSION" ]; then
              # Version already changed in code, use as is (without -SNAPSHOT)
              NEW_VERSION="$DEV_VERSION"
              echo "Using existing version from code: $NEW_VERSION"
            else
              # Auto-increment patch version
              BASE_VERSION=$(echo "$MAIN_VERSION" | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+')
              NEW_PATCH=$(echo "$BASE_VERSION" | awk -F. '{print $3+1}')
              NEW_VERSION="$(echo "$BASE_VERSION" | cut -d. -f1-2).$NEW_PATCH"
              echo "Auto-incremented version: $NEW_VERSION (patch)"
            fi
          fi
          
          # Store the next dev version (NEW_VERSION+1-SNAPSHOT)
          NEXT_PATCH=$(echo "$NEW_VERSION" | awk -F. '{print $3+1}')
          NEXT_DEV_VERSION="$(echo "$NEW_VERSION" | cut -d. -f1-2).$NEXT_PATCH-SNAPSHOT"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "next_dev_version=$NEXT_DEV_VERSION" >> $GITHUB_OUTPUT
          echo "Will create release $NEW_VERSION (next dev: $NEXT_DEV_VERSION)"

      - name: Create release branch
        id: create-branch
        run: |
          BRANCH_NAME="release-v${{ steps.new-version.outputs.version }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Make sure we're on dev branch
          git checkout dev
          
          # Create a new branch from dev
          git checkout -b $BRANCH_NAME
          
          # Update to release version (remove -SNAPSHOT if present)
          RELEASE_VERSION="${{ steps.new-version.outputs.version }}"
          
          echo "Updating to release version: $RELEASE_VERSION"
          ./mvnw versions:set -DnewVersion="$RELEASE_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit the version change
          git add .
          git commit -m "Release v$RELEASE_VERSION"
          echo "Release version $RELEASE_VERSION committed"
          
          # Update dev branch to next development version
          git checkout dev
          NEXT_DEV_VERSION="${{ steps.new-version.outputs.next_dev_version }}"
          echo "Updating dev to next development version: $NEXT_DEV_VERSION"
          ./mvnw versions:set -DnewVersion="$NEXT_DEV_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          git add .
          git commit -m "Bump version to $NEXT_DEV_VERSION"
          git push origin dev
          
          # Switch back to release branch
          git checkout $BRANCH_NAME
          
      - name: Push release branch
        run: |
          # Push the release branch
          git push origin ${{ steps.create-branch.outputs.branch_name }}

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if PR already exists
          BRANCH_NAME="${{ steps.create-branch.outputs.branch_name }}"
          PR_EXISTS=$(gh pr list --head $BRANCH_NAME --base main --json number --jq 'length')
          
          if [ "$PR_EXISTS" = "0" ]; then
            # Create new PR
            gh pr create \
              --title "Release v${{ steps.new-version.outputs.version }}" \
              --body "# Release v${{ steps.new-version.outputs.version }}
              
              This PR updates the version from v${{ steps.current-version.outputs.version }} to v${{ steps.new-version.outputs.version }} and merges changes from dev into main.
              
              ## Changes included:
              - Version bump to v${{ steps.new-version.outputs.version }}
              - All changes from dev branch
              
              Once merged, this will trigger a Docker build with the new version." \
              --base main \
              --head $BRANCH_NAME
            
            echo "Created new PR from $BRANCH_NAME to main"
          else
            # PR already exists, just update the description
            PR_NUMBER=$(gh pr list --head $BRANCH_NAME --base main --json number --jq '.[0].number')
            
            gh pr edit $PR_NUMBER \
              --title "Release v${{ steps.new-version.outputs.version }}" \
              --body "# Release v${{ steps.new-version.outputs.version }}
              
              This PR updates the version from v${{ steps.current-version.outputs.version }} to v${{ steps.new-version.outputs.version }} and merges changes from dev into main.
              
              ## Changes included:
              - Version bump to v${{ steps.new-version.outputs.version }}
              - All changes from dev branch
              
              Once merged, this will trigger a Docker build with the new version.
              
              *Updated on $(date)*"
              
            echo "Updated existing PR #$PR_NUMBER"
          fi
