name: Push to Main Workflow

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  # Check if the version in pom.xml has changed
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check-version.outputs.version_changed }}
      current_version: ${{ steps.check-version.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for version history

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Check if version changed
        id: check-version
        run: |
          # Get the current project version
          CURRENT_VERSION=$(./mvnw help:evaluate -DforceStdout -q -Dexpression=project.version)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current project version: $CURRENT_VERSION"
          
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            # Get the previous project version
            ARTIFACT_ID=$(./mvnw help:evaluate -DforceStdout -q -Dexpression=project.artifactId)
            PREV_VERSION=$(git show HEAD~1:pom.xml | grep -A 10 "<artifactId>$ARTIFACT_ID</artifactId>" | grep '<version>' | head -1 | sed -E 's/.*<version>([^<]+)<.*/\1/')
            echo "Previous project version: $PREV_VERSION"
            
            # Check if version changed
            if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
              echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
              echo "version_changed=true" >> $GITHUB_OUTPUT
            else
              echo "Version unchanged: $CURRENT_VERSION"
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
          else
            # First commit, treat as version change
            echo "First commit, treating as version change"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi
  
  # This job runs only when the version in pom.xml has changed
  build-docker:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Maven project version
        run: echo "VERSION=$(./mvnw help:evaluate -DforceStdout -q -Dexpression=project.version)" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with: 
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set IMAGE_TAG
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG=ghcr.io/${REPO_LOWER}:${VERSION}
          LATEST_TAG=ghcr.io/${REPO_LOWER}:latest
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t $IMAGE_TAG -t $LATEST_TAG .

      - name: Push Docker images
        run: |
          docker push $IMAGE_TAG
          docker push $LATEST_TAG

  # This job runs only when the version in pom.xml has NOT changed
  bump-version:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ github.token }}"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Bump version
        run: |
          # Get the current project version
          CURRENT_VERSION=$(./mvnw help:evaluate -DforceStdout -q -Dexpression=project.version)
          
          # Bump the patch version
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$NF++;print}')
          echo "Bumping version to: $NEW_VERSION"
          
          # Create a new branch for the version bump
          BRANCH_NAME="version-bump-$NEW_VERSION"
          git checkout -b $BRANCH_NAME
          
          # Update the version in pom.xml
          mvn versions:set -DnewVersion="$NEW_VERSION"
          mvn versions:commit
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit the version change
          git add pom.xml
          git commit -m "v$NEW_VERSION"
          git push origin $BRANCH_NAME
          
          # Create a PR
          gh pr create \
            --title "v$NEW_VERSION" \
            --body "Automated version bump to v$NEW_VERSION" \
            --base main \
            --head $BRANCH_NAME \
            --label "automated-pr" \
            --label "version-bump"

  sync-dev:
    needs: build-docker
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR from main to dev
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Sync dev with main after version bump"
          branch: auto/sync-main-to-dev
          base: dev
          title: "Sync dev with main after version bump"
          body: |
            Automated PR to sync dev with main after version bump.
            This will auto-merge if there are no conflicts.
          delete-branch: true
          draft: false
          labels: automated-pr, sync

      - name: Auto-merge PR if possible
        if: steps.cpr.outputs.pull-request-operation == 'created'
        uses: pascalgn/automerge-action@v0.16.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_LABELS: automated-pr,sync
          MERGE_METHOD: squash
