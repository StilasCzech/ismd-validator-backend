name: Reusable Docker Build Workflow

on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch name (main or dev)'
        required: true
        type: string
      module:
        description: 'Module to build (common, validator, or empty for all)'
        required: false
        type: string
        default: ''

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with: 
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version info
        id: version
        run: |
          # Get the base version from Maven
          if [ -z "${{ inputs.module }}" ] || [ "${{ inputs.module }}" = "root" ]; then
            BASE_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          else
            BASE_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout -pl ismd-backend-${{ inputs.module }})
          fi
          
          # For dev branches, create a version with Git SHA
          if [ "${{ inputs.branch }}" != "main" ]; then
            GIT_SHA=$(git rev-parse --short HEAD)
            VERSION="${BASE_VERSION}-${GIT_SHA}"
          else
            VERSION="${BASE_VERSION}"
            GIT_SHA=""
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "git_sha=$GIT_SHA" >> $GITHUB_OUTPUT
          
          echo "Using version: $VERSION (base: $BASE_VERSION, git: $GIT_SHA)"

      - name: Build and push Docker images
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          MODULES=("${{ inputs.module }}")
          
          # If no specific module is specified, build both
          if [ -z "${{ inputs.module }}" ]; then
            MODULES=("common" "validator")
          fi
          
          for MODULE in "${MODULES[@]}"; do
            echo "Building module: $MODULE"
            
            # Set image tags
            if [ "${{ inputs.branch }}" = "main" ]; then
              # For main branch, use just the version (e.g., 1.2.3)
              IMAGE_TAG="ghcr.io/${REPO_LOWER}/ismd-backend-${MODULE}:${{ steps.version.outputs.version }}"
              LATEST_TAG="ghcr.io/${REPO_LOWER}/ismd-backend-${MODULE}:latest"
            else
              # For dev branches, include branch name and git sha in tag
              IMAGE_TAG="ghcr.io/${REPO_LOWER}/ismd-backend-${MODULE}:${{ steps.version.outputs.version }}"
              LATEST_TAG="ghcr.io/${REPO_LOWER}/ismd-backend-${MODULE}:${{ inputs.branch }}"
            fi
            
            echo "Building $MODULE with tags: $IMAGE_TAG, $LATEST_TAG"
            
            # Debug: Show current directory and files
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la
            
            # Set build context and Dockerfile path
            DOCKERFILE="ismd-backend-${MODULE}/Dockerfile"
            BUILD_CONTEXT="."
            
            echo "Looking for Dockerfile at: $DOCKERFILE"
            if [ -f "$DOCKERFILE" ]; then
              echo "Dockerfile found at $DOCKERFILE"
            else
              echo "ERROR: Dockerfile not found at $DOCKERFILE"
              exit 1
            fi
            
            # Build and push the image
            docker build \
              -t $IMAGE_TAG \
              -t $LATEST_TAG \
              -f $DOCKERFILE \
              --build-arg MODULE_VERSION=${{ steps.version.outputs.version }} \
              --build-arg GIT_COMMIT=${{ steps.version.outputs.git_sha }} \
              $BUILD_CONTEXT
              
            docker push $IMAGE_TAG
            docker push $LATEST_TAG
            
            echo "Successfully pushed $IMAGE_TAG"
            echo "Successfully pushed $LATEST_TAG"
          done
